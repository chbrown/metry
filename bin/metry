#!/usr/bin/env node
var path = require('path');
var loge = require('loge');

var db = require('../database').default;
var server = require('../server');

var yargs = require('yargs')
  .describe({
    hostname: 'hostname to listen on',
    port: 'port to listen on',
    help: 'print this help message',
    verbose: 'print extra output',
    version: 'print version',
  })
  .example("node_restarter '**/*.js' '!ui/**/*.js' 'bin/metry --port 8365 -v'")
  .boolean([
    'help',
    'verbose',
    'version',
  ])
  .alias({
    v: 'verbose'
  })
  .default({
    hostname: process.env.HOSTNAME || '127.0.0.1',
    port: parseInt(process.env.PORT) || 80,
    verbose: process.env.DEBUG !== undefined,
  });

var argv = yargs.argv;
loge.logger.level = argv.verbose ? loge.Level.debug : loge.Level.info;

if (argv.help) {
  yargs.showHelp();
}
else if (argv.version) {
  console.log(require('../package').version);
}
else {
  loge.logger.debug('starting metry server with logger.level=%s', loge.logger.level);
  db.createDatabaseIfNotExists(function(err) {
    if (err) throw err;

    var patches_dirpath = path.join(__dirname, '..', 'schema');
    db.executePatches('_schema_patches', patches_dirpath, function(err) {
      if (err) throw err;

      server.listen(argv.port, argv.hostname);
    });
  });
}
